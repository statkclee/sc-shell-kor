<!DOCTYPE html>
<!-- saved from url=(0061)http://software-carpentry.org/v5/novice/shell/01-filedir.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
      <title>파일과 디렉토리</title>
    
    <link rel="shortcut icon" type="image/x-icon" href="http://software-carpentry.org/v5/favicon.ico">
<link href="http://software-carpentry.org/v5/css/bootstrap/bootstrap.css" rel="stylesheet">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="http://software-carpentry.org/v5/css/bootstrap/bootstrap-responsive.css" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="./Files and Directories_files/swc.css">
<link rel="stylesheet" type="text/css" href="./Files and Directories_files/swc-bootstrap.css">
<link rel="alternate" type="application/rss+xml" title="The Software Carpentry Blog" href="http://software-carpentry.org/feed.xml">
<meta charset="UTF-8">
<meta http-equiv="last-modified" content="">
<!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
<!--[if lt IE 9]>
  <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

    <link rel="stylesheet" type="text/css" href="./Files and Directories_files/lesson.css">
  </head>
  <body>
    <div class="container">
      <span id="github-ribbon"><a href="https://github.com/swcarpentry/bc">Fork me on GitHub</a></span>
<div class="banner">
  <a href="http://software-carpentry.org/" title="Software Carpentry">
    <img alt="Software Carpentry banner" src="./Files and Directories_files/software-carpentry-banner.png">
  </a>
</div>


      <div class="row-fluid">
        <div class="span10 offset1">
	  <!-- start content -->
          
          <h1>파일과 디렉토리</h1>
          
          <div class="objectives">

  <h4 id="objectives">목표</h4>
  <ul>
    <li>파일과 디렉토리의 차이점과 다른점을 설명한다.</li>
    <li>절대경로를 상대경로로 변환하고 반대로 상대경로를 절대경로로 변환한다.</li>
    <li>특정 파일과 디렉토리를 확인할 수 있는 절대경로와 상대경로를 구성한다.</li>
    <li>쉘의 읽기-실행-출력(read-run-print) 주기를 각 단계별로 설명한다.</li>
    <li>명령 라인 호출에 실제 명령어, 플래그, 파일명을 확인한다.</li>
    <li>탭 완성기능을 시연하고 장점을 설명한다.</li>
  </ul>

</div>

<p> 파일과 디렉토리를 관리를 담당하고 있는 운영체제 부분을 <a href="http://software-carpentry.org/v5/gloss.html#filesystem">파일 시스템(file system)</a>이라고 한다.
  파일 시스템은 데이터를 정보를 담고 있는 파일과 파일 혹은 다른 디렉토리를 담고 있는 
  디렉토리(혹은 폴더)로 조직한다.</p>

<p> 파일과 디렉토리를 생성, 검사, 새이름, 삭제하는데 몇가지 명령어가 자주 사용된다.
  명령어를 살펴보기 위해서 쉘 윈도우를 엽니다. </p>

<pre class="in"><code>$
</code></pre>

<p> 달러 기호 ($)는 <a href="http://software-carpentry.org/v5/gloss.html#prompt">프롬프트(prompt)</a>로 쉘이 입력을 기다리는 것을 보여준다. 여러분의 쉴이 좀더 정교한 다른 것을 보여줄수도 있다.</p>

<p> <code>whoami</code> 명령어를 타이핑하고, 명령을 쉘에 보내기 위해서 엔터키(Enter Key, 종종 키보드에 따라 Return으로 표기도 됨)를 누룹니다. 명령어의 출력은 현재 사용자의 ID가 됩니다. 즉, 쉘이 생각하는 사용자가 누구인지를 보여줍니다.</p>

<pre class="in"><code>$ whoami
</code></pre>
<pre class="out"><code>nelle
</code></pre>

<p>좀더 구체적으로, <code>whoami</code>를 타이핑할 때, 쉘은 </p>

<ol>
  <li><code>whoami</code> 프로그램을 찾고,</li>
  <li>프로그램을 실행하고, </li>
  <li>프로그램 실행 결과를 출력하고, </li>
  <li>새로운 프롬프트를 화면에 출력해서 더 많은 명령어를 받을 준비가 되어 있음을 알려줍니다.</li>
</ol>

<p> 다음으로 <code>pwd</code> 명령어를 실행하여 지금 어디에 있는지 알아봅시다.
  <code>pwd</code>는 "print working directory"의 첫 글짜를 땄습니다.
언제든지 <a href="http://software-carpentry.org/v5/gloss.html#current-working-directory">현재 작업 디렉토리(current working directory)</a>는 현재 디폴트 디렉토리가 된다.
즉, 명시적으로 다른 곳으로 지정하지 않았다면, 사용자가 명령어를 실행하는 디렉토리가 컴퓨터가 가정하는 디렉토리가 된다.
다음에서, 컴퓨터의 응답은 <code>/users/nelle</code>으로 넬(Nelle)의 <a href="http://software-carpentry.org/v5/gloss.html#home-directory">홈 디렉토리(home directory)</a>다.</p>

<pre class="in"><code>$ pwd
</code></pre>
<pre class="out"><code>/users/nelle
</code></pre>

<blockquote>
  <h4 id="alphabet-soup">알파벳 수프 (Alphabet Soup)</h4>

  <p>사용자가 누구인지를 파악하는데는 <code>whoami</code>가 사용되면, 
    사용자가 어디 있는지를 파악하는 명령어는 <code>whereami</code>가 되어야 한다.
    왜 <code>pwd</code>가 대신에 사용될까? 일반적인 대답은 다음과 같다.
    1970년대 초에 UNIX가 처음 개발되었을 때, 모든 키입력은 카운트되었고, 그시절 장비는 
    느리고, 텔레타이프의 백스페이스는 너무나도 고생스러워서, 타이핑 오류 숫자를 줄이기 위해서 키입력의 숫자를 줄이는 것이 사용자 편의성(usability)의 진정한 승자가 되었다.
    현실은 명령어가 종합계획없이 전문어와 은어에 몰입된 사람들에 의해서 유닉스에 하나씩 하나씩 추가되었다. 결과는 일관성이 없지만, 지금 우리는 뗄래야 뗄 수 없는 상태가 되었다.</p>
</blockquote>

<p> "홈 디렉토리(home directory)"를 이해하기 위해서, 파일 시스템이 전체로 어떻게 구성되었는지 살펴보자.
  최상단에 다른 모든 것을 담고 있는 <a href="http://software-carpentry.org/v5/gloss.html#root-directory">루트 디렉토리(root directory)</a>가 있다.
  슬래쉬 <code>/</code> 문자로 나타내고, <code>/users/nelle</code>에서 맨 앞에 슬래쉬이기도 하다. </p>

<p>홈 디렉토리 안쪽에 몇가지 다른 디렉토리가 있다.  
<code>bin</code> (몇몇 내장 프로그램이 저장된 디렉토리),
<code>data</code> (여러가지 데이터 파일이 저장된 디렉토리),
<code>users</code> (사용자의 개인 디렉토리가 위한 디렉토리),
<code>tmp</code> (장기간 저장될 필요가 없는 임시 파일을 위한 디렉토리),
등등. </p>

<p><img src="./Files and Directories_files/filesystem.svg" alt="The Filesystem"></p>

<p> 현재 작업 디렉토리<code>/users/nelle</code>는 <code>/users</code> 내부에 저장되어 있는데 <code>/users</code>가 이름의 처음 부분이기 때문에 알 수 있다. 마찬가지로 <code>/users</code>는 루트 디렉토리 내부에 저장되어 있는데 이름이 <code>/</code>으로 시작되기 때문이다.</p>

<p><code>/users</code> 하단에, 컴퓨터 계정의 각 사용자별 디렉토리를 볼 수 있다. 미이라(Mummy) 파일은 <code>/users/imhotep</code> 디렉토리에 저장되어 있고, 늑대인가(Wolfman)의 파일은 <code>/users/larry</code> 디렉토리에 저장되어 있고 <code>/users/nelle</code> 디렉토리에 <code>nelle</code>의 정보가 저장되어 있는데 이것이 왜 <code>nelle</code>이 디렉토리 이름의 마지막 부분인 이유다.</p>

<p><img src="./Files and Directories_files/home-directories.svg" alt="Home Directories"></p>

<blockquote>
  <p>문자 <code>/</code> 에 두가지 의미가 있음을 주목한다. 파일 혹은 디렉토리 이름의 처음에 나타날 때는 루트 디렉토리를 의미한다.
    이름 <em>중간에</em> 나타날 때는 단지 구분자임을 나타낸다. </p>
</blockquote>

<p> Nelle의 홈 디렉토리에 무엇이 있는지 <code>ls</code> 명령어를 실행해서 살펴보자. <code>ls</code>는 "목록보기(listing)"를 나타낸다.</p>

<pre class="in"><code>$ ls
</code></pre>
<pre class="out"><code>creatures  molecules           pizza.cfg
data       north-pacific-gyre  solar.pdf
Desktop    notes.txt           writing
</code></pre>

<p><img src="./Files and Directories_files/homedir.svg" alt="Nelle&#39;s Home Directory"></p>

<p><code>ls</code>는 알파벳 순서로 깔끔하게 열로 정렬하여 현재 디렉토리의 파일과 디렉토리 이름을 출력한다.
  <a href="http://software-carpentry.org/v5/gloss.html#flag">플래그(flag)</a> <code>-F</code>를 추가하여 출력을 좀더 포괄적으로 생성할 수 있다.
  <code>ls</code>으로 하여금 디렉토리 이름 뒤에 <code>/</code>을 추가하게 한다.</p>

<pre class="in"><code>$ ls -F
</code></pre>
<pre class="out"><code>creatures/  molecules/           pizza.cfg
data/       north-pacific-gyre/  solar.pdf
Desktop/    notes.txt            writing/
</code></pre>

<p><code>/users/nelle</code> 디렉토리는 7개의 <a href="http://software-carpentry.org/v5/gloss.html#sub-directory">서브 디렉토리(sub-directories)</a>를 담고 있다. 뒤에 슬래쉬를 갖지 않은 이름, 예를 들어 <code>notes.txt</code>, <code>pizza.cfg</code>, <code>solar.pdf</code>은 단순한 파일이다.
<code>ls</code>과 <code>-F</code> 사이에 공백이 있음을 주목한다. 공백이 없으면 쉘은 존재하지 않는 <code>ls-F</code> 명령어를 실행한다고 생각한다.</p>

<blockquote>
  <h4 id="whats-in-a-name">이름에는 무엇이 있나요?</h4>

  <p>Nelle의 파일 이름이 "무엇.무엇"으로 된 것을 알아챘을지 모르겠다.
    이것은 단지 관례다. 파일 이름을 <code>mythesis</code> 혹은 원하는 무엇이든지 지을 수 있다.
    하지만, 대부분의 사람들은 두 부분으로 구분된 이름을 사용하여 사람이나 프로그램이 다른 종류의 파일임을 구분하도록 돕는다.
    이름의 두번째 부분은 <a href="http://software-carpentry.org/v5/gloss.html#filename-extension">파일 확장자(filename extension)</a>라고 불리며,
    파일이 무슨 종류의 데이터를 담고 있는지 나타낸다. <code>.txt</code> 확장자는 텍스트 파일임을, <code>.pdf</code>는 PDF 문서임을, 
    <code>.cfg</code> 확장자는 어떤 프로그램의 구성정보를 담고 있는 형상관리 파일임을 나타낸다.</p>

  <p>단지 관습이기는 하지만 중요하다. 파링은 바이트(byte)를 담고 있다. PDF 문서, 이미지, 등등을 규칙에 따라 바이트를 해석하는 것은 우리와 우리의 프로그램에 맡겨졌다.</p>

  <p><code>whale.mp3</code>같은 고래 PNG 이미지의 이름이 고래 노래의 음성파일로 변환되는 마술은 없다. 설사 누군가 두번 클릭할 때, 운영체제가 음악 재생기로 열어 실행할 수는 있지만 작동은 하지 않을 것이다.</p>
</blockquote>

<p>Now let's take a look at what's in Nelle's <code>data</code> directory by running <code>ls -F data</code>,
i.e.,
the command <code>ls</code> with the <a href="http://software-carpentry.org/v5/gloss.html#argument">arguments</a> <code>-F</code> and <code>data</code>.
The second argument—the one <em>without</em> a leading dash—tells <code>ls</code> that
we want a listing of something other than our current working directory:</p>

<pre class="in"><code>$ ls -F data
</code></pre>
<pre class="out"><code>amino-acids.txt   elements/     morse.txt
pdb/              planets.txt   sunspot.txt
</code></pre>

<p>The output shows us that there are four text files and two sub-sub-directories.
Organizing things hierarchically in this way helps us keep track of our work:
it's possible to put hundreds of files in our home directory,
just as it's possible to pile hundreds of printed papers on our desk,
but it's a self-defeating strategy.</p>

<p>Notice, by the way that we spelled the directory name <code>data</code>.
It doesn't have a trailing slash:
that's added to directory names by <code>ls</code> when we use the <code>-F</code> flag to help us tell things apart.
And it doesn't begin with a slash because it's a <a href="http://software-carpentry.org/v5/gloss.html#relative-path">relative path</a>,
i.e., it tells <code>ls</code> how to find something from where we are,
rather than from the root of the file system.</p>

<blockquote>
  <h4 id="parameters-vs-arguments">Parameters vs. Arguments</h4>

  <p>According to <a href="https://en.wikipedia.org/wiki/Parameter_(computer_programming)#Parameters_and_arguments">Wikipedia</a>,
the terms <a href="http://software-carpentry.org/v5/gloss.html#argument">argument</a> and <a href="http://software-carpentry.org/v5/gloss.html#parameter">parameter</a>
mean slightly different things.
In practice,
however,
most people use them interchangeably or inconsistently,
so we will too.</p>
</blockquote>

<p>If we run <code>ls -F /data</code> (<em>with</em> a leading slash) we get a different answer,
because <code>/data</code> is an <a href="http://software-carpentry.org/v5/gloss.html#absolute-path">absolute path</a>:</p>

<pre class="in"><code>$ ls -F /data
</code></pre>
<pre class="out"><code>access.log    backup/    hardware.cfg
network.cfg
</code></pre>

<p>The leading <code>/</code> tells the computer to follow the path from the root of the filesystem,
so it always refers to exactly one directory,
no matter where we are when we run the command.</p>

<p>What if we want to change our current working directory?
Before we do this,
<code>pwd</code> shows us that we're in <code>/users/nelle</code>,
and <code>ls</code> without any arguments shows us that directory's contents:</p>

<pre class="in"><code>$ pwd
</code></pre>
<pre class="out"><code>/users/nelle
</code></pre>
<pre class="in"><code>$ ls
</code></pre>
<pre class="out"><code>creatures  molecules           pizza.cfg
data       north-pacific-gyre  solar.pdf
Desktop    notes.txt           writing
</code></pre>

<p>We can use <code>cd</code> followed by a directory name to change our working directory.
<code>cd</code> stands for "change directory",
which is a bit misleading:
the command doesn't change the directory,
it changes the shell's idea of what directory we are in.</p>

<pre class="in"><code>$ cd data
</code></pre>

<p><code>cd</code> doesn't print anything,
but if we run <code>pwd</code> after it, we can see that we are now in <code>/users/nelle/data</code>.
If we run <code>ls</code> without arguments now,
it lists the contents of <code>/users/nelle/data</code>,
because that's where we now are:</p>

<pre class="in"><code>$ pwd
</code></pre>
<pre class="out"><code>/users/nelle/data
</code></pre>
<pre class="in"><code>$ ls -F
</code></pre>
<pre class="out"><code>amino-acids.txt   elements/     morse.txt
pdb/              planets.txt   sunspot.txt
</code></pre>

<p>We now know how to go down the directory tree:
how do we go up?
We could use an absolute path:</p>

<pre class="in"><code>$ cd /users/nelle
</code></pre>

<p>but it's almost always simpler to use <code>cd ..</code> to go up one level:</p>

<pre class="in"><code>$ pwd
</code></pre>
<pre class="out"><code>/users/nelle/data
</code></pre>
<pre class="in"><code>$ cd ..
</code></pre>

<p><code>..</code> is a special directory name meaning
"the directory containing this one",
or more succinctly,
the <a href="http://software-carpentry.org/v5/gloss.html#parent-directory">parent</a> of the current directory.
Sure enough,
if we run <code>pwd</code> after running <code>cd ..</code>, we're back in <code>/users/nelle</code>:</p>

<pre class="in"><code>$ pwd
</code></pre>
<pre class="out"><code>/users/nelle
</code></pre>

<p>The special directory <code>..</code> doesn't usually show up when we run <code>ls</code>.
If we want to display it, we can give <code>ls</code> the <code>-a</code> flag:</p>

<pre class="in"><code>$ ls -F -a
</code></pre>
<pre class="out"><code>./          Desktop/             pizza.cfg
../         molecules/           solar.pdf
creatures/  north-pacific-gyre/  writing/
data/       notes.txt
</code></pre>

<p><code>-a</code> stands for "show all";
it forces <code>ls</code> to show us file and directory names that begin with <code>.</code>,
such as <code>..</code> (which, if we're in <code>/users/nelle</code>, refers to the <code>/users</code> directory).
As you can see,
it also displays another special directory that's just called <code>.</code>,
which means "the current working directory".
It may seem redundant to have a name for it,
but we'll see some uses for it soon.</p>

<blockquote>
  <h4 id="orthogonality">Orthogonality</h4>

  <p>The special names <code>.</code> and <code>..</code> don't belong to <code>ls</code>;
they are interpreted the same way by every program.
For example,
if we are in <code>/users/nelle/data</code>,
the command <code>ls ..</code> will give us a listing of <code>/users/nelle</code>.
When the meanings of the parts are the same no matter how they're combined,
programmers say they are <a href="http://software-carpentry.org/v5/gloss.html#orthogonal">orthogonal</a>:
Orthogonal systems tend to be easier for people to learn
because there are fewer special cases and exceptions to keep track of.</p>
</blockquote>

<h3 id="nelles-pipeline-organizing-files">Nelle's Pipeline: Organizing Files</h3>

<p>Knowing just this much about files and directories,
Nelle is ready to organize the files that the protein assay machine will create.
First,
she creates a directory called <code>north-pacific-gyre</code>
(to remind herself where the data came from).
Inside that,
she creates a directory called <code>2012-07-03</code>,
which is the date she started processing the samples.
She used to use names like <code>conference-paper</code> and <code>revised-results</code>,
but she found them hard to understand after a couple of years.
(The final straw was when she found herself creating
a directory called <code>revised-revised-results-3</code>.)</p>

<blockquote>
  <p>Nelle names her directories "year-month-day",
with leading zeroes for months and days,
because the shell displays file and directory names in alphabetical order.
If she used month names,
December would come before July;
if she didn't use leading zeroes,
November ('11') would come before July ('7').</p>
</blockquote>

<p>Each of her physical samples is labelled according to her lab's convention
with a unique ten-character ID,
such as "NENE01729A".
This is what she used in her collection log
to record the location, time, depth, and other characteristics of the sample,
so she decides to use it as part of each data file's name.
Since the assay machine's output is plain text,
she will call her files <code>NENE01729A.txt</code>, <code>NENE01812A.txt</code>, and so on.
All 1520 files will go into the same directory.</p>

<p>If she is in her home directory,
Nelle can see what files she has using the command:</p>

<pre class="in"><code>$ ls north-pacific-gyre/2012-07-03/
</code></pre>

<p>This is a lot to type,
but she can let the shell do most of the work.
If she types:</p>

<pre class="in"><code>$ ls nor
</code></pre>

<p>and then presses tab,
the shell automatically completes the directory name for her:</p>

<pre class="in"><code>$ ls north-pacific-gyre/
</code></pre>

<p>If she presses tab again,
Bash will add <code>2012-07-03/</code> to the command,
since it's the only possible completion.
Pressing tab again does nothing,
since there are 1520 possibilities;
pressing tab twice brings up a list of all the files,
and so on.
This is called <a href="http://software-carpentry.org/v5/gloss.html#tab-completion">tab completion</a>,
and we will see it in many other tools as we go on.</p>

<div class="keypoints">

  <h4 id="key-points">Key Points</h4>
  <ul>
    <li>The file system is responsible for managing information on the disk.</li>
    <li>Information is stored in files, which are stored in directories (folders).</li>
    <li>Directories can also store other directories, which forms a directory tree.</li>
    <li><code>/</code> on its own is the root directory of the whole filesystem.</li>
    <li>A relative path specifies a location starting from the current location.</li>
    <li>An absolute path specifies a location from the root of the filesystem.</li>
    <li>Directory names in a path are separated with '/' on Unix, but '\' on Windows.</li>
    <li>'..' means "the directory above the current one";
'.' on its own means "the current directory".</li>
    <li>Most files' names are <code>something.extension</code>.
The extension isn't required,
and doesn't guarantee anything,
but is normally used to indicate the type of data in the file.</li>
    <li>Most commands take options (flags) which begin with a '-'.</li>
  </ul>

</div>

<p><img src="./Files and Directories_files/filesystem-challenge.svg" alt="Filesystem for Challenge Questions"></p>

<div class="challenge">
  <p>If <code>pwd</code> displays <code>/users/thing</code>, what will <code>ls ../backup</code> display?</p>

  <ol>
    <li><code>../backup: No such file or directory</code></li>
    <li><code>2012-12-01 2013-01-08 2013-01-27</code></li>
    <li><code>2012-12-01/ 2013-01-08/ 2013-01-27/</code></li>
    <li><code>original pnas_final pnas_sub</code></li>
  </ol>
</div>

<div class="challenge">
  <p>If <code>pwd</code> displays <code>/users/backup</code>,
and <code>-r</code> tells <code>ls</code> to display things in reverse order,
what command will display:</p>

  <pre><code>pnas-sub/ pnas-final/ original/
</code></pre>

  <ol>
    <li><code>ls pwd</code></li>
    <li><code>ls -r -F</code></li>
    <li><code>ls -r -F /users/backup</code></li>
    <li>Either #2 or #3 above, but not #1.</li>
  </ol>
</div>

<div class="challenge">
  <p>What does the command <code>cd</code> without a directory name do?</p>

  <ol>
    <li>It has no effect.</li>
    <li>It changes the working directory to <code>/</code>.</li>
    <li>It changes the working directory to the user's home directory.</li>
    <li>It produces an error message.</li>
  </ol>
</div>

<div class="challenge">
  <p>What does the command <code>ls</code> do when used with the -s and -h arguments?</p>
</div>

	  <!-- end content -->
	</div>
      </div>

      <div class="footer">
  <a class="label swc-blue-bg" href="http://software-carpentry.org/v5/novice/shell/admin@software-carpentry.org">Email</a>
  <a class="label swc-blue-bg" href="https://twitter.com/swcarpentry">Twitter</a>
  <a class="label swc-blue-bg" href="http://software-carpentry.org/feed.xml">RSS</a>
  <a class="label swc-blue-bg" href="https://github.com/swcarpentry">GitHub</a>
  <a class="label swc-blue-bg" href="irc://moznet/sciencelab">IRC</a>
  <a class="label swc-blue-bg" href="http://software-carpentry.org/v5/LICENSE.html">License</a>
  <a class="bugreport label swc-blue-bg" href="mailto:admin@software-carpentry.org?subject=bug%20in%20novice/shell/01-filedir.md">Bug Report</a>
</div>

    </div>
    <!-- Le javascript
================================================== -->
<!-- Placed at the end of the document so the pages load faster -->
<script src="./Files and Directories_files/jquery-1.9.1.min.js"></script>
<script src="./Files and Directories_files/bootstrap.min.js"></script>

  

</body></html>